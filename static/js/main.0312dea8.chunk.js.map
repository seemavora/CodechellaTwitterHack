{"version":3,"sources":["components/PlacesAutocomplete.js","firebase.js","components/BackgroundVideo.js","App.js","index.js"],"names":["PlacesAutocomplete","props","usePlacesAutocomplete","requestOptions","debounce","ready","value","suggestions","status","data","setValue","clearSuggestions","ref","useOnclickOutside","handleSelect","description","getGeocode","address","then","results","getLatLng","lat","lng","console","log","setLongitude","setLatitude","catch","error","onChange","e","target","disabled","placeholder","className","map","suggestion","id","structured_formatting","main_text","secondary_text","onClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","BackgroundVideo","useState","phoneNumber","setPhoneNumber","longitude","latitude","params","particles","number","density","enable","size","random","anim","speed","size_min","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","style","position","zIndex","backgroundColor","Container","Row","Col","defaultCountry","alert","obj","database","set","write","App","routing","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0312dea8.chunk.js","sourcesContent":["import React from \"react\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport useOnclickOutside from \"react-cool-onclickoutside\";\n\nimport \"./PlacesAutocomplete.css\";\n\nconst PlacesAutocomplete = (props) => {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300,\n  });\n  const ref = useOnclickOutside(() => {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  const handleInput = (e) => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({ description }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter as \"false\"\n    setValue(description, false);\n    clearSuggestions();\n\n    // Get latitude and longitude via utility functions\n    getGeocode({ address: description })\n      .then((results) => getLatLng(results[0]))\n      .then(({ lat, lng }) => {\n        console.log(\"📍 Coordinates: \", { lat, lng });\n        props.setLongitude(lng);\n        props.setLatitude(lat);\n      })\n      .catch((error) => {\n        console.log(\"😱 Error: \", error);\n      });\n  };\n\n  const renderSuggestions = () =>\n    data.map((suggestion) => {\n      const {\n        id,\n        structured_formatting: { main_text, secondary_text },\n      } = suggestion;\n\n      return (\n        <li className=\"list-autocomplete\" key={id} onClick={handleSelect(suggestion)}>\n          <strong>{main_text}</strong> <small>{secondary_text}</small>\n        </li>\n      );\n    });\n\n  return (\n    <div ref={ref}>\n      <input\n        value={value}\n        onChange={handleInput}\n        disabled={!ready}\n        placeholder=\"Enter your location.\"\n        className=\"location-input-box\"\n      />\n      {status === \"OK\" && <ul className=\"full-list\">{renderSuggestions()}</ul>}\n    </div>\n  );\n};\n\nexport default PlacesAutocomplete;","import firebase from \"firebase\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAezcoT2Dpgh6OO-Y0mRk4s952JIzp5Tns\",\n  authDomain: \"twitter-tracker-6e45a.firebaseapp.com\",\n  databaseURL: \"https://twitter-tracker-6e45a.firebaseio.com\",\n  projectId: \"twitter-tracker-6e45a\",\n  storageBucket: \"twitter-tracker-6e45a.appspot.com\",\n  messagingSenderId: \"161829123701\",\n  appId: \"1:161829123701:web:4735cefad33f69432e2a3c\",\n  measurementId: \"G-K5471VQ1NK\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport function write(ref, obj) {\n  firebase\n    .database()\n    .ref(ref)\n    .set(obj);\n}\n","import React, { useState } from \"react\";\n\nimport \"./BackgroundVideo.css\";\n\nimport Particles from \"react-particles-js\";\n\nimport PhoneInput from \"react-phone-number-input\";\n\nimport { Container, Row, Col } from \"reactstrap\";\nimport PlacesAutocomplete from \"./PlacesAutocomplete\";\n\nimport {write} from \"../firebase\";\n\nconst BackgroundVideo = () => {\n  const [phoneNumber, setPhoneNumber] = useState();\n  const [longitude, setLongitude] = useState();\n  const [latitude, setLatitude] = useState();\n\n  function onSubmitInfo()\n  {\n      if(!longitude || !latitude || !phoneNumber)\n      {\n          alert(\"Please fill out all areas.\");\n      }\n      else{\n          alert(\"Thank you for using Twext! You should now receive text notifications about events in your area.\");\n\n          let ref = \"user/\" + phoneNumber;\n          let obj = {phoneNumber, longitude, latitude};\n          write(ref, obj);\n      }\n  }\n\n  return (\n    <div>\n      <Particles\n        params={{\n          particles: {\n            number: {\n              value: 1000,\n              density: {\n                enable: false\n              }\n            },\n            size: {\n              value: 3,\n              random: true,\n              anim: {\n                speed: 4,\n                size_min: 0.3\n              }\n            },\n            line_linked: {\n              enable: false\n            },\n            move: {\n              random: true,\n              speed: 1,\n              direction: \"top\",\n              out_mode: \"out\"\n            }\n          },\n          interactivity: {\n            events: {\n              onhover: {\n                enable: true,\n                mode: \"bubble\"\n              },\n              onclick: {\n                enable: true,\n                mode: \"repulse\"\n              }\n            },\n            modes: {\n              bubble: {\n                distance: 250,\n                duration: 2,\n                size: 0,\n                opacity: 0\n              },\n              repulse: {\n                distance: 400,\n                duration: 4\n              }\n            }\n          }\n        }}\n        style={{\n          position: \"fixed\",\n          opacity: \"1\",\n          zIndex: \"-3\",\n          backgroundColor: \"black\"\n        }}\n      />\n      <div className=\"Content\">\n        <div className=\"SubContent\">\n          <h1 className=\"tweet-title\">Twext</h1>\n          <div className=\"information-box\">\n            <h1 className=\"info-box-words\">PERSONAL INFORMATION</h1>\n            <Container>\n              <Row className=\"phone-num-row\">\n                <Col>\n                  <h1 className=\"label-info\">Phone Number</h1>\n                </Col>\n                <Col>\n                  <PhoneInput\n                    placeholder=\"Enter phone number.\"\n                    value={phoneNumber}\n                    onChange={setPhoneNumber}\n                    defaultCountry=\"US\"\n                    className=\"phone-input\"\n                  />\n                </Col>\n              </Row>\n              <Row className=\"phone-num-row\">\n                <Col>\n                  <h1 className=\"label-info\">Location</h1>\n                  <button className=\"submit-button\" onClick={onSubmitInfo}>Submit</button>\n                </Col>\n                <Col>\n                  <PlacesAutocomplete\n                    setLongitude={setLongitude}\n                    setLatitude={setLatitude}\n                  ></PlacesAutocomplete>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundVideo;\n","import \"./App.css\";\nimport BackgroundVideo from \"./components/BackgroundVideo\";\nimport React from \"react\";\n\nfunction App() {\n  return <BackgroundVideo></BackgroundVideo>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\n\n\n\nconst routing = (\n  <Router>\n    <Switch>\n      <Route exact component={App}/>\n    </Switch>\n  </Router>\n)\n\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}